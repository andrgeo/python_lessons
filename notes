#3. Примените к любой строке следующие функции:
len() - определяет длину строки;
title() - преобразует первый символ каждого слова в строке к верхнему регистру;
lower() - символы строки преобразуются к нижнему регистру;
upper() - символы строки преобразуются к верхнему регистру;
rstrip() – удаляются пробелы в конце строки;
lstrip() – удаляются пробелы в начале строки;
strip() - удаляются пробелы с обоих концов;
strip('0') - удаляются с обоих концов указанные символы в параметре функции.
Извлечение символов и подстрок
4. С помощью выражений индексирования ([]) извлеките требуемый символ,
например:
d = "qwerty"
ch = d[2] # извлекается символ ‘e’
5. Примените срез (slicing) для извлечения за одну операцию целого сегмента
(среза) строки (в качестве результата возвращается новый объект),
например:
chm = d[1:3]
6. Проверьте другие варианты извлечения, d[1:], d[:3], d[:], d[1:5:2].
7. Попробуйте с помощью операции индексирования изменить строку,
например:
d[2] = ‘o’
Должна быть ошибка: TypeError: ‘str’ object does not support item assignment
Строки в языке Python являются неизменяемыми – после того, как строка будет
создана, ее нельзя изменить.
2
Работа с числами
1. Продолжите работать с тем же файлом.
2. Объявите две переменные целого типа и проверьте операции
целочисленного деления(\), взятие остатка (%) и возведение в степень (**).
3. Проверьте работу операции «+» для строки и числа, например, введите
param = "string" + 15
Должна быть ошибка: TypeError: can only concatenate str (not "int") to str
Python не выполняет автоматическое преобразование других типов.
Подумайте, что нужно сделать для ее исправления.
Преобразование данных
Для реализации операции сложения строки и числа необходимо провести
преобразование типа одного из операндов с помощью встроенных функций.
1. Реализуйте конкатенацию – число преобразуйте к строке:
param = "string" + str(15)
2. Составьте программу, запрашивающую у пользователя два числа и
реализующую их сложение. Для этого преобразуйте строку к требуемому
числовому типу:
n1 = input("Enter the first number: ")
n2 = input("Enter the second number: ")
n3 = float(n1) + float(n2)
print(n1 + " plus " + n2 + " = ", n3)
Форматирование строк
Форматный вывод: все данные, которые нужно вывести, сначала преобразуют в
символьную строку с помощью функции format().
1. Изучите справку о функции format() – раздел 7.1.2. The String format()
Method.
2. Введите в окно редактора следующий код и проанализируйте результат:
a = 1/3
print("{:7.3f}".format(a))
3. Проверьте форматный вывод для нескольких значений сразу:
a = 2/3
b = 2/9
print("{:7.3f} {:7.3f}".format(a, b))
print("{:10.3e} {:10.3e}".format(a, b))
4. В программе прошлого раздела, (запрашивающую у пользователя два числа
и реализующую их сложение) измените способ вывода результата –
примените функцию format().
Списки
Списки реализуют упорядоченные по местоположению коллекции объектов 
3
произвольных типов. Списки являются изменяемыми – могут модифицироваться как
с помощью операций присваивания, так и с помощью разнообразных методов
работы со списками.
1. Создайте список произвольных чисел, например:
list1 = [82,8,23,97,92,44,17,39,11,12]
2. Примените команду dir для просмотра методов работы со списками
(dir(list)).
3. Вызовите справку (с помощью команды help) для методов insert, append,
sort, remove, reverse.
4. Измените значения элементов списка (по вашему усмотрению) с помощью
операции индексирования.
5. Добавьте новый элемент в конец списка.
6. Добавьте новый элемент в произвольную (на ваше усмотрение) позицию
списка.
7. Удалите элемент из списка по известной позиции.
8. Удалите последний элемент из списка
Сортировка элементов списка
Метод sort() осуществляет изменение порядка элементов в списке и вернуться к
исходному порядку уже не удастся.
1. Выполните сортировку списка list1 с помощью метода sort() по убыванию
(параметр reverse = True).
2. Проверьте, что исходный список теперь имеет указанный порядок.
Чтобы сохранить исходный порядок элементов списка, но представить их в
отсортированном порядке можно воспользоваться функцией sorted().
3. Создайте новый список произвольных элементов, например
list2 = [3,5,6,2,33,6,11]
4. Объявите новый объект (будет список) и ему присвойте результат работы
функции sorted():
lis = sorted(list2)
5. Проверьте содержимое исходного и отсортированного списков.
Кортежи
Объект-кортеж (tuple) – последовательность данных, которые невозможно
изменить. Поддерживает включение объектов различных типов, вложение и
операции, типичные для последовательностей.
1. Примените команду dir для просмотра методов работы со списками
(dir(tuple)).
2. Вызовите справку (с помощью команды help) для методов index, count.
3. Создайте кортеж произвольных чисел, например:
seq = (2,8,23,97,92,44,17,39,11,12)
4
4. Определите, что возвращают команды:
seq.count(8)
seq.index(44)
5. Преобразуйте кортеж к типу «список»:
listseq = list(seq)
6. С помощью команды type(listseq) проверьте правильность преобразования.
7. Проверьте работу основных методов, применяемых к списку для
преобразованного «кортежа».
Словари
Словари – ассоциативные массивы, в которых доступ к данным осуществляется
по ключу. Любой объект Python, может стать значением в словаре.
1. Создайте словарь, состоящий из трех элементов (с ключами «food»
(продукт питания), «quantity» (количество) и «color» (цвет)):
D = {‘food’: ‘Apple’, ‘quantity’: 4, ‘color’: ‘Red’}
2. Проверьте возможность доступа к элементам этого словаря по ключам и
изменения значений, связанные с ключами (в квадратных скобках
указывается ключ), например:
D[‘food’]
D[‘quantity’] += 10
3. Создайте пустой словарь:
dp = {}
4. Напишите инструкцию, заполняющую словарь значениями, вводимыми с
клавиатуры в создаваемые ‘на лету’ ключи ‘name’ и ‘age’.
Вложенность хранения данных
Базовые структурные типы поддерживают возможность создания вложенных
конструкций произвольной глубины и в любых комбинациях (например, можно
создать список, содержащий словарь, который содержит другой список, и так далее.
Требуется реализовать сложную структуру представления данных о некой
персоне, включающая имя и фамилию, несколько названий должностей,
занимаемых одновременно, а также возраст.
1. Создайте словарь, реализующий требуемую структуру:
rec = {‘name’: {‘firstname’: ‘Bob’, ‘lastname’: ‘Smith’},
 ‘job’: [‘dev’, ‘mgr’],
 ‘age’: 25}
2. Реализуйте вывод значения полного имени, отдельно имени firstname,
список должностей.
3. Напишите инструкцию, расширяющую список должностей, например:
rec[‘job’].append(‘janitor’)
4. Выведите полную информацию о персоне.